function(link_glew PROJ_NAME)
	find_package (GLEW REQUIRED)

	if (GLEW_FOUND AND NOT WIN32 AND NOT BUILD_DEPENDENCIES)
		message(STATUS "GLEW found")
		target_include_directories(${PROJ_NAME} PRIVATE ${GLEW_INCLUDE_DIRS})
		target_link_libraries(${PROJ_NAME} ${GLEW_LIBRARIES})
	else()
		if(TARGET glew_s OR TARGET glew)
			message(STATUS "GLEW already included")
		else()
			message(STATUS "GLEW not found, building from source")
			file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew-2.0.0 ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew)
			file(DOWNLOAD https://github.com/nigels-com/glew/releases/download/glew-2.0.0/glew-2.0.0.tgz ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew-2.0.0.tgz)
			execute_process(COMMAND ${CMAKE_COMMAND} -E tar xfz glew-2.0.0.tgz
				WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/vendor OUTPUT_QUIET)
			file(REMOVE ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew-2.0.0.tgz)
			file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew-2.0.0 ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew)
			file(REMOVE ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew/build/cmake/CMakeLists.txt)
			file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/cmake/patches/glew001-CMakeLists.txt DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew/build/cmake)
			file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew/build/cmake/glew001-CMakeLists.txt ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew/build/cmake/CMakeLists.txt)
			set(GLEW_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew/auto/src CACHE PATH "glew include directory" FORCE)
			add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/vendor/glew/build/cmake EXCLUDE_FROM_ALL)
		endif()
		add_dependencies(${PROJ_NAME} glew_s)
		target_link_libraries(${PROJ_NAME} glew_s)
		target_include_directories(${PROJ_NAME} PRIVATE ${GLEW_INCLUDE_DIRS})
	endif()
endfunction()
